# stubs/pygame.pyi

from typing import Any

class mixer:
    @staticmethod
    def init() -> None: ...
    @staticmethod
    def quit() -> None: ...
    @staticmethod
    def music() -> Any: ...
    @staticmethod
    def get_init() -> None: ...
    def Sound(*args: Any, **kwargs: Any) -> Any: ...

class music:
    @staticmethod
    def load(filename: Any) -> None: ...
    @staticmethod
    def play(loops: int = 0, start: float = 0.0) -> None: ...
    @staticmethod
    def stop() -> None: ...
    @staticmethod
    def pause() -> None: ...
    @staticmethod
    def unpause() -> None: ...
    @staticmethod
    def set_volume(volume: float) -> None: ...

def init() -> None: ...
def quit() -> None: ...

class Surface:
    def __init__(self, size: Any, flags: int = 0, depth: int = 0, masks: Any = None) -> None: ...
    def blit(self, source: Any, dest: Any, area: Any = None) -> None: ...
    def fill(self, color: Any) -> None: ...
    def get_size(self) -> Any: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def convert(self, surface: Any = None) -> Any: ...
    def convert_alpha(self, surface: Any = None) -> Any: ...

class Rect:
    def __init__(self, left: int, top: int, width: int, height: int) -> None: ...
    def colliderect(self, other: Any) -> bool: ...
    def move(self, x: int, y: int) -> Any: ...
    def inflate(self, x: int, y: int) -> Any: ...
    def clip(self, other: Any) -> Any: ...
    def union(self, other: Any) -> Any: ...
    def copy(self) -> Any: ...

class image:
    @staticmethod
    def load(filename: Any) -> Any: ...
    @staticmethod
    def save(surface: Any, filename: Any) -> None: ...

class display:
    @staticmethod
    def set_mode(size: Any, flags: int = 0, depth: int = 0) -> Any: ...
    @staticmethod
    def flip() -> None: ...
    @staticmethod
    def update(rectangle: Any = None) -> None: ...

class event:
    @staticmethod
    def get() -> Any: ...
    @staticmethod
    def poll() -> Any: ...
    @staticmethod
    def clear() -> None: ...
    @staticmethod
    def Event(type: int, dict: Any = None) -> Any: ...

QUIT: int = ...
KEYDOWN: int = ...
KEYUP: int = ...
MOUSEBUTTONDOWN: int = ...
MOUSEBUTTONUP: int = ...
MOUSEMOTION: int = ...
K_UP: int = ...
K_DOWN: int = ...
K_LEFT: int = ...
K_RIGHT: int = ...
K_SPACE: int = ...
K_ESCAPE: int = ...
